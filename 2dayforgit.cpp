Задача 3
3.1 Написать функцию для работы с односвязным списком :

struct Node {
	int val;
	Item* next;
};

-Инициализации элемента односвязного списка нулями

void init(Node * node);


-Отображения односвязного списка на экран

void show(Node * head);

-Добавления элемента в односвязный список

void pushNode(Node * head, Node * node);


3.2 Написать функции в соответсвии с вариантом
Вариант 1:

Написать функцию инициализации size элементов списка заданным значением val.

void initList(Node * head, int size, int val)

Вариант 2:

Написать функцию копирования элементов массива source в новый массив dest

void copyMas(Node * source, Node * dest);


Вариант 3:

Написать функцию сравнение списков source и dest.Если списки равны 0, если не равны - 1
int compareMas(Node * source, Node * dest);



Вариант 4:

Написать функцию удаления со сдвигом влево n - го элемента списка.
void deleteList(Node * head, int n);


Вариант 5:

Написать функцию сдвига значений вправо на n - элементов с заполнением крайних элементов нулями
void rShiftList(Node * head, int n);



Вариант 6:

Написать функцию сдвига значений влево на n - элементов с заполнением крайних элементов нулями.
void lShiftList(Node * head, int n);


Вариант 7:

Написать функцию сдвига значений влево на n - элементов с переносом вытесненных элементов в конец
void lRoundShiftMas(Node * head, int n, int size);


Вариант 8:

Написать функцию вычисления среднего значения элементов списка.
int averageList(Node * head, int size);


Вариант 9:

Написать функцию вычисления средне квадратического отклонения элементов списка.
int SkoFromList(Node * head, int size);


Задача 4. Написать тесты для Ваших функций из 3.1 и 3.2